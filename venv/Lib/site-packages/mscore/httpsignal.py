import requests
from django.conf import settings
from django.db.models import Model
from .models.sendedsignal import SendedSignal
from .constants import CREATE_SIGNAL_TYPE, FREEZE_SIGNAL_TYPE, DEFREEZE_SIGNAL_TYPE


class HttpSignal(object):
    def __init__(self, model_class, uid):
        self._model_class = model_class
        self._uid = uid

    def _send_signal(self, type):
        signal = SendedSignal.objects.create(
            sender=self._model_class,
            object=self._uid,
            type=type,
        )
        respounce = requests.request(
            method='POST',
            url=settings.API_END_POINT_URL + '/instance/signal/send/',
            data={
                'token': settings.API_TOKEN,
                'type': signal.type,
                'signal': signal.uid,
                'sender': self._model_class,
                'object': signal.object,
                # 'signal': signal.uid
            }
        )
        result = respounce.json()
        if 'status' not in result:
            signal.listeners = result['listeners']
            signal.is_error = True
            signal.save()
            # raise RuntimeError('Cant sending signal to api endpoint, did you forget register sender?')
        if result['status']:
            # ct = ContentType.objects.get(model=self._model_class._meta.model_name, app_label=self._model_class._meta.app_label)
            signal.listeners = result['listeners']
            signal.is_sent = True
            signal.save()

    def send_freeze_signal(self):
        self._send_signal(FREEZE_SIGNAL_TYPE)

    def send_defreeze_signal(self):
        self._send_signal(DEFREEZE_SIGNAL_TYPE)

    def send_create_signal(self):
        self._send_signal(CREATE_SIGNAL_TYPE)