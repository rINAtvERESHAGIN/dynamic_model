import requests
from http import HTTPStatus
from django.conf import settings
from django.db.models import Manager, UUIDField, CharField
from .basemodels import FreezeBaseModel


class RelationSpecificModelBaseManager(Manager):
    related_model = None
    required_fields = []

    def _check_exist(self, uid):
        response = requests.request(
            method='POST',
            url=settings.API_END_POINT_URL + '/instance/related/exist/',
            data={
                'token': settings.API_TOKEN,
                'uid': uid,
                'model': self.related_model,
            }
        )
        if response.status_code == HTTPStatus.BAD_REQUEST:
            return False
        result = response.json()
        if 'exist' not in result:
            return False
        return result['exist']

    def get_queryset(self):
        '''
        filter cross instance relation model queryset with specific model;
        :return: Queryset
        '''
        if self.related_model:
            return super().get_queryset().filter(model=self.related_model)
        else:
            raise RuntimeError('{0} dont set relation_model'.format(self.__class__))

    def create(self, **kwargs):
        '''
        create cross instance relation model with cpecific model;
        :param kwargs: standart create kwargs
        :return: created object
        '''
        kwargs.update({'model': self.related_model})
        return super().create(**kwargs)

    def get_or_create_if_exist(self, uid):
        try:
            return self.get(uid=uid, model=self.related_model)
        except self.model.DoesNotExist:
            if self._check_exist(uid=uid):
                return self.create(uid=uid)
            else:
                return self.none()



class RelationBaseModel(FreezeBaseModel):
    uid = UUIDField()
    model = CharField(default='None', max_length=100)

    def _send_post_freeze(self):
        '''
        send post freeze signal
        :return: no return
        '''
        pass

    def _send_post_defreeze(self):
        '''
        send post unfreeze signal
        :return: no return
        '''
        pass

    def _send_post_create(self):
        '''
        send post create signal
        :return: no return
        '''
        pass

    def get_related_data(self, fields=None):
        if fields is None:
            fields = self.__class__.objects.required_fields
        respounce = requests.request(
            url=settings.API_END_POINT_URL + '/instance/related/get/',
            method='POST',
            data={
                'token': settings.API_TOKEN,
                'model': self.__class__.objects.related_model,
                'uid': self.uid,
                'fields': fields,
            }
        )
        json = respounce.json()
        return json
