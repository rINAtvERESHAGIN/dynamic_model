import requests
from http import HTTPStatus
from django.conf import settings
from django.db import router
from django.core import exceptions
from django.db.models.fields.related import ForeignKey


class InstanceForeignKey(ForeignKey):
    def _check_exist(self, value):
        respounce = requests.request(
            method='POST',
            url=settings.API_END_POINT_URL + 'instance/related/exist/',
            data={
                'token': settings.API_TOKEN,
                'uid': value,
                'model': self.remote_field.model.objects.related_model
            }
        )
        if respounce.status_code == HTTPStatus.BAD_REQUEST:
            return False
        result = respounce.json()
        if 'exist' not in result:
            return False
        return result['exist']

    def validate(self, value, model_instance):
        if self.remote_field.parent_link:
            return
        super().validate(value, model_instance)
        if value is None:
            return

        using = router.db_for_read(self.remote_field.model, instance=model_instance)
        qs = self.remote_field.model._default_manager.using(using).filter(
            **{self.remote_field.field_name: value}
        )
        qs = qs.complex_filter(self.get_limit_choices_to())
        if not qs.exists():
            self.remote_field.model.objects.get_or_create_if_exist(uid=value)
        return super().validate()
